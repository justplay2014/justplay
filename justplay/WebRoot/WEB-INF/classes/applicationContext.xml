<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<context:annotation-config/>
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/justplay?useUnicode=true&amp;characterEncoding=utf8"/>
		<property name="username" value="root"/>
		<property name="password" value="123456"/>
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="1"/>
		<!-- 连接池允许连接的最大值 -->
		<property name="maxActive" value="500"/>
		<!-- 最大空闲连接数 ，当空闲值超过阈值时，连接池会慢慢将一些空闲的连接去掉，直到maxIdle为止-->
		<property name="maxIdle" value="2"/>
		<!-- 最小空闲连接数，当空闲值小于阈值时，连接池会去申请连接，以免洪峰到来时来不及申请 -->
		<property name="minIdle" value="1"/>
	</bean>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mappingResources">
			<list>
				<value>com/justplay/beans/User.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQL5Dialect
				</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hihernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate3.SpringSessionContext</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.cache.use_second_level_cache">flase</prop>
				<prop key="hibernate.cache.use_query_cache">flase</prop>
			</props>
		</property>
	</bean>
	<!-- 配置事务管理器 -->	
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- 利用注解方式 -->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<bean id="userDao" class="com.justplay.dao.impl.UserDaoImpl" scope="prototype">
		 <property name="sessionFactory" ref="sessionFactory"></property>  
	</bean>
	<!-- 定义一个业务逻辑组件,把Service交给Spring管理 -->
	<bean id="userService" class="com.justplay.service.impl.UserServiceImpl" scope="prototype">
		<property name="userDao" ref="userDao"></property>
	</bean>
	
	<!-- 把Action交给Spring管理，当使用Spring容器管理Struts2的Action时，由于每一个Action对应于一次用户请求，且封装了该次
 	              请求的状态信息，所以不应将Action配置成单例模式，因此必须指定scope属性，该属性值可指定为prototype和request两种-->
	<bean id="loginAction" class="com.justplay.action.user.LoginAction" scope="prototype">
		<!-- 依赖注入业务逻辑组件 -->
		<property name="userService" ref="userService"/>
	</bean>
</beans>